const { GoogleGenerativeAI } = require("@google/generative-ai");
const axios = require('axios');

// --- Robust Environment Variable Check ---
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const PINATA_API_KEY = process.env.PINATA_API_KEY;
const PINATA_SECRET_API_KEY = process.env.PINATA_SECRET_API_KEY;

if (!GEMINI_API_KEY) {
  console.error("FATAL_ERROR: GEMINI_API_KEY environment variable is not set.");
}
if (!PINATA_API_KEY || !PINATA_SECRET_API_KEY) {
    console.error("FATAL_ERROR: Pinata API keys are not fully set.");
}

// Initialize the client only if the key exists.
const genAI = GEMINI_API_KEY ? new GoogleGenerativeAI(GEMINI_API_KEY) : null;

/**
 * Vercel Serverless Function to handle various Gemini API requests.
 */
module.exports = async (req, res) => {
  // CORS Headers
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  // --- Service Availability Check ---
  if (!genAI) {
    return res.status(500).json({ error: "The AI service is not configured correctly. Check GEMINI_API_KEY." });
  }

  try {
    const { type, prompt, history, imageUrl, description, attributes } = req.body;

    if (!type) {
      return res.status(400).json({ error: 'Request "type" is required.' });
    }

    // --- Route Handling ---
    switch (type) {
      case 'generate-description':
      case 'chat': {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        let result;
        if (type === 'chat') {
            const chat = model.startChat({ history: history || [] });
            result = await chat.sendMessage(prompt);
        } else {
            result = await model.generateContent(prompt);
        }
        const response = await result.response;
        const text = response.text();
        return res.status(200).json({ text });
      }

      case 'generate-image': {
        console.log(`Image generation requested with prompt: "${prompt}"`);
        const imageUrl = `https://dummyimage.com/512x512/1c944d/ffffff&text=OKE-CARD+for+${encodeURIComponent(prompt.substring(0, 20))}`;
        return res.status(200).json({ imageUrl });
      }

      case 'upload-metadata': {
        if (!PINATA_API_KEY || !PINATA_SECRET_API_KEY) {
            return res.status(500).json({ error: "The IPFS service is not configured correctly. Check Pinata keys." });
        }
        if (!imageUrl || !description) {
          return res.status(400).json({ error: 'imageUrl and description are required for metadata upload.' });
        }

        const metadata = {
          name: "AI-Generated OKE-CARD",
          description: description,
          image: imageUrl,
          attributes: attributes || [{ "trait_type": "Generated By", "value": "Gemini AI" }]
        };

        const pinataUrl = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;
        const pinataResponse = await axios.post(
          pinataUrl,
          { pinataContent: metadata, pinataMetadata: { name: 'OKE-CARD Metadata' } },
          { headers: { 'pinata_api_key': PINATA_API_KEY, 'pinata_secret_api_key': PINATA_SECRET_API_KEY } }
        );

        const ipfsHash = pinataResponse.data.IpfsHash;
        const tokenURI = `ipfs://${ipfsHash}`;
        return res.status(200).json({ tokenURI });
      }

      default:
        return res.status(400).json({ error: `Unsupported type: ${type}` });
    }
  } catch (error) {
    console.error("Error in API function:", error);
    const errorMessage = error.response ? JSON.stringify(error.response.data) : error.message;
    return res.status(500).json({ error: "An internal server error occurred.", details: errorMessage });
  }
};